(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "Û∞ïæ"
            :value volume
            :onchange "")
    (metric :label "Û∞Åπ"
            :value battery
            :onchange "")
    (metric :label "Û∞çõ"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    time))

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/getws")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/getcurws")
(defwidget workspaces []
 (box :space-evenly true
   (for workspace in workspaces
    (label :class "workspace-entry workspace-${workspace == current_workspace ? "active" : "inactive"}" :text "${workspace}")
  )
 )
 )

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "üéµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll battery :interval "60s"
  "scripts/getbat")

(defpoll time :interval "10s"
  "date '+%H:%M %F'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "14px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "80px")
  :wm-ignore false
  (bar))
