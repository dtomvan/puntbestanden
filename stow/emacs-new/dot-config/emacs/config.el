;;; -*- lexical-binding: t -*-
;;; THIS FILE IS AUTOGENERATED BY org-babel-tangle
;;; DO-NOT-EDIT

(use-package emacs
  :ensure nil
  :init
  (global-display-line-numbers-mode 1)
  :custom
  (initial-scratch-message "")
  (initial-buffer-choice t)
  (initial-major-mode 'lisp-interaction-mode))

(use-package custom
  :ensure nil
  :custom
  (custom-file (locate-user-emacs-file "custom.el")))

(setq make-backup-files nil
	backup-inhibited nil
	create-lockfiles nil)

(when (native-comp-available-p)
  (setq native-comp-async-report-warnings-errors 'silent)
  (setq native-compile-prune-cache t))

(require 'package)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(defcustom user/light-theme 'modus-operandi-tinted
  "The theme used when the light theme is enabled.")
(defcustom user/dark-theme 'modus-vivendi-tinted
  "The theme used when the dark theme is enabled.")
(defcustom user/is-dark-theme t
  "If true, use the user/dark-theme, if false, use the user/light-theme"
  :type '(boolean))
(defun user/set-theme ()
  "Set the theme based on user/is-dark-theme."
  (interactive)
  ;; TODO: is it required to disable all other themes?
  (seq-each (lambda (theme)
		(disable-theme theme))
	      custom-enabled-themes)
  (if user/is-dark-theme
	(load-theme user/dark-theme t)
    (load-theme user/light-theme t)))
(defun user/toggle-theme ()
  "Toggle the theme between light and dark."
  (interactive)
  (setq user/is-dark-theme (not user/is-dark-theme))
  (user/set-theme))

(user/set-theme)

(defconst user/dark-theme-max 7) ; Dark theme until 7 am
(defconst user/dark-theme-min 19) ; Dark theme from 7 pm
(defun user/set-theme-tod ()
  "Sets the theme based on the current time of day"
  (interactive)
  (let ((current-hour (cl-parse-integer (format-time-string "%H")))
	  (old-is-dark user/is-dark-theme))
    (setq user/is-dark-theme
	    (or (> current-hour user/dark-theme-min)
		(< current-hour user/dark-theme-max)))
    (when
	  (not (eq old-is-dark user/is-dark-theme))
	(user/set-theme))))

(defvar user/theme-tod-timer nil)
(defconst user/theme-tod-interval (* 30 60)) ; half an hour
(define-minor-mode theme-tod-mode
  "When enabled, periodically checks for time of day and sets the theme accordingly."
  :global t
  :lighter 'theme-tod
  (when theme-tod-mode (user/set-theme-tod)) ; when toggled on do the thing initially
  (setq user/theme-tod-timer
	  (if
	      (timerp user/theme-tod-timer)
	      (cancel-timer user/theme-tod-timer)
	    (run-at-time t user/theme-tod-interval 'user/set-theme-tod))))

(theme-tod-mode 1)

(set-face-attribute 'default nil :font "AporeticSansM Nerd Font" :height 130)

(defconst user/variable-width-font "AporeticSans Nerd Font")
(set-face-attribute 'modus-themes-heading-1 nil
		      :family user/variable-width-font
		      :height 1.3)
(set-face-attribute 'modus-themes-heading-2 nil
		      :family user/variable-width-font
		      :height 1.2)
(set-face-attribute 'modus-themes-heading-3 nil
		      :family user/variable-width-font
		      :height 1.1)
(set-face-attribute 'modus-themes-heading-4 nil
		      :family user/variable-width-font
		      :height 1.05)

(use-package vertico
  :ensure t
  :hook (after-init . vertico-mode))
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode))

(defun user/minibuffer-backspace ()
  "If applicable, go up to the next backslash"
  (interactive)
  (if
	  (string-match-p "/$" (minibuffer-contents))
	  (backward-kill-sexp)
    (backward-delete-char 1)))

(with-eval-after-load 'vertico
  (bind-key (kbd "DEL") #'user/minibuffer-backspace 'vertico-map))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(defun consult-beframe-buffer-list (&optional frame)
  "Return the list of buffers from `beframe-buffer-names' sorted by visibility.
With optional argument FRAME, return the list of buffers of FRAME."
  (beframe-buffer-list frame :sort #'beframe-buffer-sort-visibility))

(use-package consult
  :after beframe
  :ensure t
  :init
  (setq consult-buffer-list-function #'consult-beframe-buffer-list)
  :bind
  ("M-s f" . consult-fd)
  ("M-s M-s" . consult-line)
  ("M-s o" . consult-outline)
  ("M-s p" . consult-ripgrep)
  ("C-x b" . consult-buffer))

(use-package ultra-scroll
  :ensure t
  :custom
  (scroll-conservatively 3)
  (scroll-margin 0)
  :config
  (ultra-scroll-mode 1))

(use-package beframe
  :ensure t
  :after evil
  :init
  (beframe-mode 1)
  (evil-global-set-key
   'normal
   (kbd "SPC b")
   'beframe-transient)
  :bind
  ("C-x b" . beframe-switch-buffer)
  ("C-x C-b" . beframe-buffer-menu)
  ("C-x f" . other-frame-prefix)
  :custom
  (beframe-functions-in-frames '(project-prompt-project-dir)))

; required for U and C-r
(use-package undo-fu
  :ensure t)

(setq evil-undo-system 'undo-fu
	evil-want-keybinding nil)

; required for certain functionality I can't remember
(use-package goto-chg
  :ensure t)

(defun user/evil-insert-paste ()
  (interactive)
  (evil-paste-from-register ?\"))

(use-package evil
  :ensure t
  :init
  (evil-mode 1)
  :bind
  (:map evil-insert-state-map
	  ("C-y" . user/evil-insert-paste))	; paste with emacs keybind even in insert mode
  )

(evil-global-set-key
 'normal
 (kbd "SPC t h")
 'user/toggle-theme)

(setq display-line-numbers-type 'relative)

(use-package evil-commentary
  :ensure t
  :after evil
  :init (evil-commentary-mode))

(use-package evil-surround
  :ensure t
  :after evil
  :config
  (global-evil-surround-mode 1))

(use-package evil-collection
  :ensure t
  :after evil
  :init
  (evil-collection-init))

(defun user/open-config ()
  "open the config file"
  (interactive)
  (find-file (locate-user-emacs-file "config.org")))

(evil-global-set-key
 'normal
 (kbd "SPC c f")
 'user/open-config)

(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode))

(use-package editorconfig
  :ensure nil
  :init
  (editorconfig-mode t))

(use-package corfu
:ensure t
:hook (after-init . global-corfu-mode)
:bind (:map corfu-map ("<tab>" . corfu-complete))
:config
(setq tab-always-indent 'complete)
(setq corfu-preview-current nil)
(setq corfu-min-width 20)

(setq corfu-popupinfo-delay '(1.25 . 0.5))
(corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'

;; Sort by input history (no need to modify `corfu-sort-function').
(with-eval-after-load 'savehist
  (corfu-history-mode 1)
  (add-to-list 'savehist-additional-variables 'corfu-history)))

(use-package whitespace
  :ensure nil
  :defer t
  :hook (before-save . whitespace-cleanup))

(use-package elec-pair
  :ensure nil
  :defer
  :hook (prog-mode . electric-pair-local-mode))

(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :custom
  (show-paren-delay 0)
  (show-paren-style 'mixed)
  (show-paren-context-when-offscreen t))

(use-package project
  :ensure nil
  :config
  (add-to-list 'project-vc-extra-root-markers ".jj"))

(evil-global-set-key 'normal (kbd "SPC p") project-prefix-map)

(use-package vc-jj
  :after project
  :ensure t
  :config
  (add-to-list 'project-vc-backend-markers-alist '(jj . ".jj")))

(defvar user/org-root "~/org/refile.org" "The file to open orgmode in initially.")
(defun user/org-open ()
  "Open orgmode file at which my vault starts."
  (interactive)
  (find-file (expand-file-name user/org-root)))

(use-package org
  :ensure nil
  :init
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'user/org-open)
  (global-set-key (kbd "C-c c") 'org-capture)
  :custom
  (org-directory "~/org")
  (org-default-notes-file "~/org/refile.org")
  (org-agenda-files '("~/org"))
  (org-log-done 'time) ; log the datetime when you marked a todo as done
  (org-log-refile 'time) ; log the datetime when you refiled something

  (org-agenda-custom-commands
    '(("u" "Unscheduled TODOs"
	 tags "+TODO=\"TODO\"-SCHEDULED={}")))

  ;; When exporting to .ical, do the right thing and use due dates
  ;; as event dates
  ;; Otherwise, one has to specify a property to do icalendar stuff,
  ;; which isn't a sensible default IMO
  (org-icalendar-use-deadline '(even-if-todo-not-done))
  (org-icalendar-use-scheduled '(even-if-todo-not-done))

  (org-log-into-drawer t)
  (org-use-fast-todo-selection t)
  (org-treat-S-cursor-todo-selection-as-state-change nil))

(use-package evil-org
  :ensure t
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(with-eval-after-load 'org
  (setq org-capture-templates
	    '(("t" "todo" entry (file "") "\n* TODO %?\n%U\n%a\n")
	      ;; ("n" "note" entry (file "") "\n* %? :NOTE:\n%U\n%a\n")
	      ("r" "reading list" item (file+olp "" "Reading list" "Uncategorized"))
	      ("c" "config entry"
	       entry (file "~/.config/emacs/config.org")
	       "* %?\n\n#+begin_src emacs-lisp\n\n#+end_src\n")
	      ;; OBTF for daily, no YYYY-MM-dd.md anymore
	      ("j" "Journal Entry"
	       entry (file+olp+datetree "~/org/daily.org")
	       "* %?"
	       :empty-lines 1))))

(defconst user/org-clipper-value "copy(`[[${location.href}][${document.title}]]`)")
(defun user/org-get-clipper ()
  (interactive)
  (kill-new user/org-clipper-value))

(with-eval-after-load 'org
  (setq org-refile-targets
	  '(
	    ("~/org/refile.org" . (:level . 2))
	    ("~/org/projects.org" . (:level . 1))
	    (nil . (:level . 1))
	    )))

(use-package markdown-mode
  :ensure t)
(defun user/denote-dired ()
  "dired at the denote root directory"
  (interactive)
  (dired org-directory))
(use-package denote
  :ensure t
  :after dired
  :custom
  (denote-directory org-directory)
  (denote-file-type "markdown-yaml") ;like obsidian
  :bind
  (:map evil-normal-state-map
				("SPC d d" . user/denote-dired)
				("SPC d n" . denote)
				("SPC d N" . denote-type)
				("SPC d l" . denote-link)
				("SPC d r" . denote-rename-file))
  :hook
  ((dired-mode . denote-dired-mode))
  )

;; Allows you to convert Obsidian to Denote links and back, etc.
;; TODO: maybe customize `denote-md-link-format'?
(use-package denote-markdown
  :ensure t
  :after denote)

(use-package consult-denote
  :ensure t
  :bind
  (:map evil-normal-state-map
	  ("SPC d f" . consult-denote-find)
	  ("SPC d p" . consult-denote-grep))
  :config
  (consult-denote-mode 1))

(with-eval-after-load 'treesit
  (unless (treesit-language-available-p 'typst)
    (add-to-list 'treesit-language-source-alist
		   '(typst "https://github.com/uben0/tree-sitter-typst"))
    (treesit-install-language-grammar 'typst)))
(use-package typst-ts-mode
  :ensure t)

(use-package vc
  :ensure nil
  :custom
  (vc-follow-symlinks t))
(use-package magit
  :commands (magit)
  :ensure t)

(with-eval-after-load 'dired
  (require 'dired-x)
  (add-hook 'dired-mode-hook 'dired-omit-mode)
  (setq dired-omit-files
	     (concat dired-omit-files "\\|^\\."))
  (bind-key (kbd "C->") #'dired-omit-mode 'dired-mode-map))

(setq dired-use-ls-dired t
	dired-listing-switches "-lah  --group-directories-first")

(setq dired-kill-when-opening-new-dired-buffer t)

(use-package dired
  :ensure nil
  :commands (dired)
  :hook
  ((dired-mode . dired-hide-details-mode)
   (dired-mode . hl-line-mode))
  :config
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t))

(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)

(use-package treesit-langs
  :ensure t
  :vc (:url "https://github.com/emacs-tree-sitter/treesit-langs.git")
  :init
  (treesit-langs-major-mode-setup))

(use-package nix-mode
  :ensure t)

(use-package elfeed
  :ensure t
  :bind
  (:map evil-normal-state-map
	  ("SPC r s s" . elfeed)))

(use-package elfeed-org
  :ensure t
  :after elfeed
  :init
  (elfeed-org)
  :custom
  (rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org")))
